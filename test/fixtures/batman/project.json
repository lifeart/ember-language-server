{
  "app/app.js": "import Application from '@ember/application';\r\nimport Resolver from './resolver';\r\nimport loadInitializers from 'ember-load-initializers';\r\nimport config from './config/environment';\r\n\r\nconst App = Application.extend({\r\n  modulePrefix: config.modulePrefix,\r\n  podModulePrefix: config.podModulePrefix,\r\n  Resolver\r\n});\r\n\r\nloadInitializers(App, config.modulePrefix);\r\n\r\nexport default App;\r\n",
  "app/components/another-awesome-component.js": "import Bar from 'foo/components/bar';\nexport default class Awesome extends Bar {\n\n}\n",
  "app/components/my-awesome-component.js": "",
  "app/helpers/some-helper.js": "",
  "app/models/model-a.js": "import DS from 'ember-data';\r\n\r\nexport default DS.Model.extend({\r\n\r\n  modelB: DS.hasMany('model-b'),\r\n\r\n  someAttr: DS.attr('custom-transform')\r\n\r\n});\r\n",
  "app/models/model-b.js": "import DS from 'ember-data';\r\n\r\nexport default DS.Model.extend({\r\n\r\n  modelB: DS.belongsTo('model-a')\r\n\r\n});\r\n",
  "app/resolver.js": "import Resolver from 'ember-resolver';\r\n\r\nexport default Resolver;\r\n",
  "app/router.js": "import EmberRouter from '@ember/routing/router';\r\nimport config from './config/environment';\r\n\r\nconst Router = EmberRouter.extend({\r\n  location: config.locationType,\r\n  rootURL: config.rootURL\r\n});\r\n\r\nRouter.map(function() {\r\n  this.route('test-route');\r\n});\r\n\r\nexport default Router;\r\n",
  "app/routes/nested/nested-route.js": "",
  "app/routes/test-route.js": "import Route from '@ember/routing/route';\r\n\r\nexport default Route.extend({\r\n});\r\n",
  "app/templates/angle-completion.hbs": "{{! We use the next empty expression for testing completion items}}\r\n<A\r\n",
  "app/templates/application.hbs": "{{! We use the next empty expression for testing completion items}}\r\n{{}}\r\n",
  "app/templates/batman-completion.hbs": "{{! We use the next empty expression for testing completion items}}\r\n<F",
  "app/templates/batman-definition.hbs": "<Boo$Bar />",
  "app/templates/components/another-awesome-component.hbs": "",
  "app/templates/components/nested/nested-component.hbs": "",
  "app/templates/definition.hbs": "{{my-awesome-component}}\r\n{{some-helper}}\r\n{{link-to \"Some link\" \"\"}}\r\n{{#link-to \"\"}}{{/link-to}}",
  "app/templates/same-component-name.hbs": "<",
  "app/templates/test-route.hbs": "{{outlet}}",
  "app/transforms/custom-transform.js": "import DS from 'ember-data';\r\n\r\nexport default DS.Transform.extend({\r\n  deserialize(serialized) {\r\n    return serialized;\r\n  },\r\n\r\n  serialize(deserialized) {\r\n    return deserialized;\r\n  }\r\n});\r\n",
  "config/environment.js": "'use strict';\r\n\r\nmodule.exports = function(environment) {\r\n  let ENV = {\r\n    modulePrefix: 'batman',\r\n    environment,\r\n    rootURL: '/',\r\n    locationType: 'auto',\r\n    EmberENV: {\r\n      FEATURES: {\r\n        // Here you can enable experimental features on an ember canary build\r\n        // e.g. 'with-controller': true\r\n      },\r\n      EXTEND_PROTOTYPES: {\r\n        // Prevent Ember Data from overriding Date.parse.\r\n        Date: false\r\n      }\r\n    },\r\n\r\n    APP: {\r\n      // Here you can pass flags/options to your application instance\r\n      // when it is created\r\n    }\r\n  };\r\n\r\n  if (environment === 'development') {\r\n    // ENV.APP.LOG_RESOLVER = true;\r\n    // ENV.APP.LOG_ACTIVE_GENERATION = true;\r\n    // ENV.APP.LOG_TRANSITIONS = true;\r\n    // ENV.APP.LOG_TRANSITIONS_INTERNAL = true;\r\n    // ENV.APP.LOG_VIEW_LOOKUPS = true;\r\n  }\r\n\r\n  if (environment === 'test') {\r\n    // Testem prefers this...\r\n    ENV.locationType = 'none';\r\n\r\n    // keep test console output quieter\r\n    ENV.APP.LOG_ACTIVE_GENERATION = false;\r\n    ENV.APP.LOG_VIEW_LOOKUPS = false;\r\n\r\n    ENV.APP.rootElement = '#ember-testing';\r\n    ENV.APP.autoboot = false;\r\n  }\r\n\r\n  if (environment === 'production') {\r\n    // here you can enable a production-specific feature\r\n  }\r\n\r\n  return ENV;\r\n};\r\n",
  "config/targets.js": "'use strict';\r\n\r\nconst browsers = [\r\n  'last 1 Chrome versions',\r\n  'last 1 Firefox versions',\r\n  'last 1 Safari versions'\r\n];\r\n\r\nconst isCI = !!process.env.CI;\r\nconst isProduction = process.env.EMBER_ENV === 'production';\r\n\r\nif (isCI || isProduction) {\r\n  browsers.push('ie 11');\r\n}\r\n\r\nmodule.exports = {\r\n  browsers\r\n};\r\n",
  "ember-cli-build.js": "'use strict';\r\n\r\nconst EmberApp = require('ember-cli/lib/broccoli/ember-app');\r\n\r\nmodule.exports = function(defaults) {\r\n  let app = new EmberApp(defaults, {\r\n    // Add options here\r\n  });\r\n\r\n  // Use `app.import` to add additional libraries to the generated\r\n  // output files.\r\n  //\r\n  // If you need to use different assets in different\r\n  // environments, specify an object as the first parameter. That\r\n  // object's keys should be the environment name and the values\r\n  // should be the asset to use in that environment.\r\n  //\r\n  // If the library that you are including contains AMD or ES6\r\n  // modules that you would like to import into your application\r\n  // please specify an object with the list of modules as keys\r\n  // along with the exports of each module as its value.\r\n\r\n  return app.toTree();\r\n};\r\n",
  "lib/boo/addon/templates/components/bar.hbs": "<Foo$Bar />\r\n<Boo$Bar />",
  "lib/boo/index.js": "/* eslint-env node */\r\n'use strict';\r\n\r\nmodule.exports = {\r\n  name: 'boo',\r\n\r\n  isDevelopingAddon() {\r\n    return true;\r\n  }\r\n};",
  "lib/boo/package.json": "{\r\n    \"name\": \"boo\",\r\n    \"keywords\": [\r\n      \"ember-addon\"\r\n    ],\r\n    \"dependencies\": {\r\n    \r\n    }\r\n  }",
  "lib/foo/addon/components/bar.js": "",
  "lib/foo/addon/templates/components/bar.hbs": "\r\n<MyAwesomeComponent />\r\n\r\n<Boo$Bar />",
  "lib/foo/index.js": "/* eslint-env node */\r\n'use strict';\r\n\r\nmodule.exports = {\r\n  name: 'foo',\r\n\r\n  isDevelopingAddon() {\r\n    return true;\r\n  }\r\n};",
  "lib/foo/package.json": "{\r\n    \"name\": \"foo\",\r\n    \"keywords\": [\r\n      \"ember-addon\"\r\n    ],\r\n    \"dependencies\": {\r\n    \r\n    }\r\n  }",
  "package.json": "{\r\n  \"name\": \"batman\",\r\n  \"version\": \"0.0.0\",\r\n  \"private\": true,\r\n  \"description\": \"Small description for full-project goes here\",\r\n  \"license\": \"MIT\",\r\n  \"author\": \"\",\r\n  \"directories\": {\r\n    \"doc\": \"doc\",\r\n    \"test\": \"tests\"\r\n  },\r\n  \"repository\": \"\",\r\n  \"scripts\": {\r\n    \"build\": \"ember build\",\r\n    \"lint:js\": \"eslint ./*.js app config lib server tests\",\r\n    \"start\": \"ember serve\",\r\n    \"test\": \"ember test\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"broccoli-asset-rev\": \"^2.4.5\",\r\n    \"ember-ajax\": \"^3.0.0\",\r\n    \"ember-cli\": \"~3.1.0-beta.1\",\r\n    \"ember-cli-app-version\": \"^3.0.0\",\r\n    \"ember-cli-babel\": \"^6.6.0\",\r\n    \"ember-cli-dependency-checker\": \"^2.0.0\",\r\n    \"ember-cli-eslint\": \"^4.2.1\",\r\n    \"ember-cli-htmlbars\": \"^2.0.1\",\r\n    \"ember-cli-htmlbars-inline-precompile\": \"^1.0.0\",\r\n    \"ember-cli-inject-live-reload\": \"^1.4.1\",\r\n    \"ember-cli-qunit\": \"^4.1.1\",\r\n    \"ember-cli-shims\": \"^1.2.0\",\r\n    \"ember-cli-sri\": \"^2.1.0\",\r\n    \"ember-cli-uglify\": \"^2.0.0\",\r\n    \"ember-data\": \"~3.1.0-beta.1\",\r\n    \"ember-export-application-global\": \"^2.0.0\",\r\n    \"ember-load-initializers\": \"^1.0.0\",\r\n    \"ember-maybe-import-regenerator\": \"^0.1.6\",\r\n    \"ember-resolver\": \"^4.0.0\",\r\n    \"ember-source\": \"~3.1.0-beta.1\",\r\n    \"ember-welcome-page\": \"^3.0.0\",\r\n    \"eslint-plugin-ember\": \"^5.0.0\",\r\n    \"loader.js\": \"^4.2.3\"\r\n  },\r\n  \"dependencies\": {\r\n    \"ember-holy-futuristic-template-namespacing-batman\": \"^1.0.2\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \"^4.5 || 6.* || >= 7.*\"\r\n  },\r\n  \"ember-addon\": {\r\n    \"paths\": [\r\n      \"lib/foo\",\r\n\t  \"lib/boo\"\r\n    ]\r\n  }\r\n}\r\n",
  "testem.js": "module.exports = {\r\n  test_page: 'tests/index.html?hidepassed',\r\n  disable_watching: true,\r\n  launch_in_ci: [\r\n    'Chrome'\r\n  ],\r\n  launch_in_dev: [\r\n    'Chrome'\r\n  ],\r\n  browser_args: {\r\n    Chrome: {\r\n      mode: 'ci',\r\n      args: [\r\n        // --no-sandbox is needed when running Chrome inside a container\r\n        process.env.TRAVIS ? '--no-sandbox' : null,\r\n\r\n        '--disable-gpu',\r\n        '--headless',\r\n        '--remote-debugging-port=0',\r\n        '--window-size=1440,900'\r\n      ].filter(Boolean)\r\n    }\r\n  }\r\n};\r\n",
  "tests/test-helper.js": "import Application from '../app';\r\nimport config from '../config/environment';\r\nimport { setApplication } from '@ember/test-helpers';\r\nimport { start } from 'ember-qunit';\r\n\r\nsetApplication(Application.create(config.APP));\r\n\r\nstart();\r\n",
  "tests/unit/models/model-a-test.js": "import { module, test } from 'qunit';\r\nimport { setupTest } from 'ember-qunit';\r\nimport { run } from '@ember/runloop';\r\n\r\nmodule('Unit | Model | model a', function(hooks) {\r\n  setupTest(hooks);\r\n\r\n  // Replace this with your real tests.\r\n  test('it exists', function(assert) {\r\n    let store = this.owner.lookup('service:store');\r\n    let model = run(() => store.createRecord('model-a', {}));\r\n    assert.ok(model);\r\n  });\r\n});\r\n",
  "tests/unit/models/model-b-test.js": "import { module, test } from 'qunit';\r\nimport { setupTest } from 'ember-qunit';\r\nimport { run } from '@ember/runloop';\r\n\r\nmodule('Unit | Model | model b', function(hooks) {\r\n  setupTest(hooks);\r\n\r\n  // Replace this with your real tests.\r\n  test('it exists', function(assert) {\r\n    let store = this.owner.lookup('service:store');\r\n    let model = run(() => store.createRecord('model-b', {}));\r\n    assert.ok(model);\r\n  });\r\n});\r\n",
  "tests/unit/routes/test-route-test.js": "import { module, test } from 'qunit';\r\nimport { setupTest } from 'ember-qunit';\r\n\r\nmodule('Unit | Route | test-route', function(hooks) {\r\n  setupTest(hooks);\r\n\r\n  test('it exists', function(assert) {\r\n    let route = this.owner.lookup('route:test-route');\r\n    assert.ok(route);\r\n  });\r\n});\r\n",
  "tests/unit/transforms/custom-transform-test.js": "import { module, test } from 'qunit';\r\nimport { setupTest } from 'ember-qunit';\r\n\r\nmodule('transform:custom-transform', 'Unit | Transform | custom transform', function(hooks) {\r\n  setupTest(hooks);\r\n\r\n  // Replace this with your real tests.\r\n  test('it exists', function(assert) {\r\n    let transform = this.owner.lookup('transform:custom-transform');\r\n    assert.ok(transform);\r\n  });\r\n});\r\n"
}