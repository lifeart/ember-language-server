{
  "app/app.js": "import Application from '@ember/application';\nimport Resolver from './resolver';\nimport loadInitializers from 'ember-load-initializers';\nimport config from './config/environment';\n\nconst App = Application.extend({\n  modulePrefix: config.modulePrefix,\n  podModulePrefix: config.podModulePrefix,\n  Resolver\n});\n\nloadInitializers(App, config.modulePrefix);\n\nexport default App;\n",
  "app/components/another-awesome-component.js": "import Bar from 'foo/components/bar';\nexport default class Awesome extends Bar {\n\n}\n",
  "app/components/my-awesome-component.js": "",
  "app/helpers/some-helper.js": "",
  "app/models/model-a.js": "import DS from 'ember-data';\n\nexport default DS.Model.extend({\n\n  modelB: DS.hasMany('model-b'),\n\n  someAttr: DS.attr('custom-transform')\n\n});\n",
  "app/models/model-b.js": "import DS from 'ember-data';\n\nexport default DS.Model.extend({\n\n  modelB: DS.belongsTo('model-a')\n\n});\n",
  "app/resolver.js": "import Resolver from 'ember-resolver';\n\nexport default Resolver;\n",
  "app/router.js": "import EmberRouter from '@ember/routing/router';\nimport config from './config/environment';\n\nconst Router = EmberRouter.extend({\n  location: config.locationType,\n  rootURL: config.rootURL\n});\n\nRouter.map(function() {\n  this.route('test-route');\n});\n\nexport default Router;\n",
  "app/routes/nested/nested-route.js": "",
  "app/routes/test-route.js": "import Route from '@ember/routing/route';\n\nexport default Route.extend({\n});\n",
  "app/templates/angle-completion.hbs": "{{! We use the next empty expression for testing completion items}}\n<A\n",
  "app/templates/application.hbs": "{{! We use the next empty expression for testing completion items}}\n{{}}\n",
  "app/templates/batman-completion.hbs": "{{! We use the next empty expression for testing completion items}}\n<F",
  "app/templates/batman-definition.hbs": "<Boo$Bar />",
  "app/templates/components/another-awesome-component.hbs": "",
  "app/templates/components/nested/nested-component.hbs": "",
  "app/templates/definition.hbs": "{{my-awesome-component}}\n{{some-helper}}\n{{link-to \"Some link\" \"\"}}\n{{#link-to \"\"}}{{/link-to}}",
  "app/templates/same-component-name.hbs": "<",
  "app/templates/test-route.hbs": "{{outlet}}",
  "app/transforms/custom-transform.js": "import DS from 'ember-data';\n\nexport default DS.Transform.extend({\n  deserialize(serialized) {\n    return serialized;\n  },\n\n  serialize(deserialized) {\n    return deserialized;\n  }\n});\n",
  "config/environment.js": "'use strict';\n\nmodule.exports = function(environment) {\n  let ENV = {\n    modulePrefix: 'batman',\n    environment,\n    rootURL: '/',\n    locationType: 'auto',\n    EmberENV: {\n      FEATURES: {\n        // Here you can enable experimental features on an ember canary build\n        // e.g. 'with-controller': true\n      },\n      EXTEND_PROTOTYPES: {\n        // Prevent Ember Data from overriding Date.parse.\n        Date: false\n      }\n    },\n\n    APP: {\n      // Here you can pass flags/options to your application instance\n      // when it is created\n    }\n  };\n\n  if (environment === 'development') {\n    // ENV.APP.LOG_RESOLVER = true;\n    // ENV.APP.LOG_ACTIVE_GENERATION = true;\n    // ENV.APP.LOG_TRANSITIONS = true;\n    // ENV.APP.LOG_TRANSITIONS_INTERNAL = true;\n    // ENV.APP.LOG_VIEW_LOOKUPS = true;\n  }\n\n  if (environment === 'test') {\n    // Testem prefers this...\n    ENV.locationType = 'none';\n\n    // keep test console output quieter\n    ENV.APP.LOG_ACTIVE_GENERATION = false;\n    ENV.APP.LOG_VIEW_LOOKUPS = false;\n\n    ENV.APP.rootElement = '#ember-testing';\n    ENV.APP.autoboot = false;\n  }\n\n  if (environment === 'production') {\n    // here you can enable a production-specific feature\n  }\n\n  return ENV;\n};\n",
  "config/targets.js": "'use strict';\n\nconst browsers = [\n  'last 1 Chrome versions',\n  'last 1 Firefox versions',\n  'last 1 Safari versions'\n];\n\nconst isCI = !!process.env.CI;\nconst isProduction = process.env.EMBER_ENV === 'production';\n\nif (isCI || isProduction) {\n  browsers.push('ie 11');\n}\n\nmodule.exports = {\n  browsers\n};\n",
  "ember-cli-build.js": "'use strict';\n\nconst EmberApp = require('ember-cli/lib/broccoli/ember-app');\n\nmodule.exports = function(defaults) {\n  let app = new EmberApp(defaults, {\n    // Add options here\n  });\n\n  // Use `app.import` to add additional libraries to the generated\n  // output files.\n  //\n  // If you need to use different assets in different\n  // environments, specify an object as the first parameter. That\n  // object's keys should be the environment name and the values\n  // should be the asset to use in that environment.\n  //\n  // If the library that you are including contains AMD or ES6\n  // modules that you would like to import into your application\n  // please specify an object with the list of modules as keys\n  // along with the exports of each module as its value.\n\n  return app.toTree();\n};\n",
  "lib/boo/addon/templates/components/bar.hbs": "<Foo$Bar />\n<Boo$Bar />",
  "lib/boo/index.js": "/* eslint-env node */\n'use strict';\n\nmodule.exports = {\n  name: 'boo',\n\n  isDevelopingAddon() {\n    return true;\n  }\n};",
  "lib/boo/package.json": "{\n    \"name\": \"boo\",\n    \"keywords\": [\n      \"ember-addon\"\n    ],\n    \"dependencies\": {\n    \n    }\n  }",
  "lib/foo/addon/components/bar.js": "",
  "lib/foo/addon/templates/components/bar.hbs": "\n<MyAwesomeComponent />\n\n<Boo$Bar />",
  "lib/foo/index.js": "/* eslint-env node */\n'use strict';\n\nmodule.exports = {\n  name: 'foo',\n\n  isDevelopingAddon() {\n    return true;\n  }\n};",
  "lib/foo/package.json": "{\n    \"name\": \"foo\",\n    \"keywords\": [\n      \"ember-addon\"\n    ],\n    \"dependencies\": {\n    \n    }\n  }",
  "package.json": "{\n  \"name\": \"batman\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"description\": \"Small description for full-project goes here\",\n  \"license\": \"MIT\",\n  \"author\": \"\",\n  \"directories\": {\n    \"doc\": \"doc\",\n    \"test\": \"tests\"\n  },\n  \"repository\": \"\",\n  \"scripts\": {\n    \"build\": \"ember build\",\n    \"lint:js\": \"eslint ./*.js app config lib server tests\",\n    \"start\": \"ember serve\",\n    \"test\": \"ember test\"\n  },\n  \"devDependencies\": {\n    \"broccoli-asset-rev\": \"^2.4.5\",\n    \"ember-ajax\": \"^3.0.0\",\n    \"ember-cli\": \"~3.1.0-beta.1\",\n    \"ember-cli-app-version\": \"^3.0.0\",\n    \"ember-cli-babel\": \"^6.6.0\",\n    \"ember-cli-dependency-checker\": \"^2.0.0\",\n    \"ember-cli-eslint\": \"^4.2.1\",\n    \"ember-cli-htmlbars\": \"^2.0.1\",\n    \"ember-cli-htmlbars-inline-precompile\": \"^1.0.0\",\n    \"ember-cli-inject-live-reload\": \"^1.4.1\",\n    \"ember-cli-qunit\": \"^4.1.1\",\n    \"ember-cli-shims\": \"^1.2.0\",\n    \"ember-cli-sri\": \"^2.1.0\",\n    \"ember-cli-uglify\": \"^2.0.0\",\n    \"ember-data\": \"~3.1.0-beta.1\",\n    \"ember-export-application-global\": \"^2.0.0\",\n    \"ember-load-initializers\": \"^1.0.0\",\n    \"ember-maybe-import-regenerator\": \"^0.1.6\",\n    \"ember-resolver\": \"^4.0.0\",\n    \"ember-source\": \"~3.1.0-beta.1\",\n    \"ember-welcome-page\": \"^3.0.0\",\n    \"eslint-plugin-ember\": \"^5.0.0\",\n    \"loader.js\": \"^4.2.3\"\n  },\n  \"dependencies\": {\n    \"ember-holy-futuristic-template-namespacing-batman\": \"^1.0.2\"\n  },\n  \"engines\": {\n    \"node\": \"^4.5 || 6.* || >= 7.*\"\n  },\n  \"ember-addon\": {\n    \"paths\": [\n      \"lib/foo\",\n\t  \"lib/boo\"\n    ]\n  }\n}\n",
  "testem.js": "module.exports = {\n  test_page: 'tests/index.html?hidepassed',\n  disable_watching: true,\n  launch_in_ci: [\n    'Chrome'\n  ],\n  launch_in_dev: [\n    'Chrome'\n  ],\n  browser_args: {\n    Chrome: {\n      mode: 'ci',\n      args: [\n        // --no-sandbox is needed when running Chrome inside a container\n        process.env.TRAVIS ? '--no-sandbox' : null,\n\n        '--disable-gpu',\n        '--headless',\n        '--remote-debugging-port=0',\n        '--window-size=1440,900'\n      ].filter(Boolean)\n    }\n  }\n};\n",
  "tests/test-helper.js": "import Application from '../app';\nimport config from '../config/environment';\nimport { setApplication } from '@ember/test-helpers';\nimport { start } from 'ember-qunit';\n\nsetApplication(Application.create(config.APP));\n\nstart();\n",
  "tests/unit/models/model-a-test.js": "import { module, test } from 'qunit';\nimport { setupTest } from 'ember-qunit';\nimport { run } from '@ember/runloop';\n\nmodule('Unit | Model | model a', function(hooks) {\n  setupTest(hooks);\n\n  // Replace this with your real tests.\n  test('it exists', function(assert) {\n    let store = this.owner.lookup('service:store');\n    let model = run(() => store.createRecord('model-a', {}));\n    assert.ok(model);\n  });\n});\n",
  "tests/unit/models/model-b-test.js": "import { module, test } from 'qunit';\nimport { setupTest } from 'ember-qunit';\nimport { run } from '@ember/runloop';\n\nmodule('Unit | Model | model b', function(hooks) {\n  setupTest(hooks);\n\n  // Replace this with your real tests.\n  test('it exists', function(assert) {\n    let store = this.owner.lookup('service:store');\n    let model = run(() => store.createRecord('model-b', {}));\n    assert.ok(model);\n  });\n});\n",
  "tests/unit/routes/test-route-test.js": "import { module, test } from 'qunit';\nimport { setupTest } from 'ember-qunit';\n\nmodule('Unit | Route | test-route', function(hooks) {\n  setupTest(hooks);\n\n  test('it exists', function(assert) {\n    let route = this.owner.lookup('route:test-route');\n    assert.ok(route);\n  });\n});\n",
  "tests/unit/transforms/custom-transform-test.js": "import { module, test } from 'qunit';\nimport { setupTest } from 'ember-qunit';\n\nmodule('transform:custom-transform', 'Unit | Transform | custom transform', function(hooks) {\n  setupTest(hooks);\n\n  // Replace this with your real tests.\n  test('it exists', function(assert) {\n    let transform = this.owner.lookup('transform:custom-transform');\n    assert.ok(transform);\n  });\n});\n"
}